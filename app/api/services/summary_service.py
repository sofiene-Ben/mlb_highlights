import google.generativeai as genai
from infrastructure.config.app import settings
from datetime import datetime
from api.services.match_service import get_match_highlights
from api.repositories.game_repository import store_game_summary


# Configuration de l'API Generative AI
genai.configure(api_key=settings.generative_ai_api_key)


def generate_game_summary(highlights, user_favorite_team):
    """
    G√©n√®re un r√©sum√© narratif d√©taill√© d'un match de baseball √† partir des highlights.

    Args:
        highlights (list): Liste des faits marquants d'un match.
        user_favorite_team (str): √âquipe favorite de l'utilisateur.

    Returns:
        str: R√©sum√© g√©n√©r√© du match.
    """
    try:
                # V√©rifie que highlights est bien une liste
        if not isinstance(highlights, list):
            raise Exception("Les highlights doivent √™tre une liste.")
        
        # Concat√®ne les √©l√©ments de la liste en une cha√Æne
        # combined_highlights = " ".join(highlights)

        # Construire le prompt √† partir des donn√©es fournies
        game_prompt = f"""
        Agis comme un journaliste sportif avec une approche unique et personnalis√©e. Ton objectif est d‚Äô√©crire un r√©sum√© captivant et vari√© d‚Äôun match de baseball, en mettant en lumi√®re les moments importants tout en prenant en compte les pr√©f√©rences de l‚Äôutilisateur.
        Fais en sorte que chaque r√©sum√© soit distinct, en utilisant des descriptions imaginatives, des m√©taphores, et des √©motions qui vont au-del√† des faits bruts. 
        R√©dige un r√©sum√© d√©taill√© avec les points suivants en t√™te :

        - R√©dige une introduction vivante et originale qui capte l‚Äôessence du match, les enjeux et l‚Äôambiance. N‚Äôh√©site pas √† surprendre par un angle inattendu.
        - Organise les moments cl√©s du match d‚Äôune mani√®re originale, que ce soit par l‚Äôintensit√©, la surprise, ou l‚Äô√©l√©ment narratif qui se d√©gage de l‚Äôhistoire du match.
        - Mettez en lumi√®re les h√©ros du match, mais √©galement les moments o√π les joueurs ont montr√© une r√©silience ou une cr√©ativit√© particuli√®res. 
        - Prends en compte l‚Äô√©quipe favorite de l‚Äôutilisateur : {user_favorite_team}, et construit un fil narratif qui la met en valeur sans oublier de nuancer le reste du match.
        - Conclus par une r√©flexion sur les implications du match, mais aussi en jetant un regard plus cr√©atif sur l‚Äôavenir des √©quipes, de la saison ou de la rivalit√©.

        Rappelle-toi de varier les m√©taphores et d‚Äôapporter de la profondeur √† chaque √©v√©nement. Les r√©sum√©s doivent toujours √™tre captivants et surprenants, mais √©viter les r√©p√©titions.
        ne fait pas toujours les meme debut de resumer.
        je ne veux voir aucune contenant "[Nom d'utilisateur]"

        si les donnees du match n'existe pas donne un message de resumer de match non disponible
        toute tes reponses doivent etre en anglais.

        Donn√©es importantes du match :
        """
        #         Comporte toi comme un redacteur sportif travaillant pour une plateforme, qui propose des resumer personnaliser pour chacun de ses utilisateur.
        # Ton role est d'ecrire un article qui resume de fa√ßon personnaliser des highlight d'un match de baseball en fonction des preferences de l'utilisateur.
        # R√©dige un r√©sum√© narratif d√©taill√© d‚Äôun match de baseball en utilisant les informations suivantes. 
        # Le r√©sum√© doit √™tre captivant, mettre en avant les moments cl√©s, les performances des joueurs, et inclure une progression dramatique. 
        # Utilise un ton professionnel mais vivant, comme celui d‚Äôun commentateur sportif ou d‚Äôun journaliste.
        # Veille a prendre en compte l'equipe favorite du jouer afin de tourner le resumer en sa faveur.

        # Donn√©es importantes du match :
        # Ajouter les highlights au prompt
        for highlight in highlights:
            game_prompt += f"- {highlight}\n"
        
        # Ajouter des consignes pour la g√©n√©ration
       # game_prompt += f"""
        # Consignes :
        # - Commence par une introduction captivante pr√©sentant les √©quipes, l'enjeu du match, et l'ambiance g√©n√©rale.  (tu n'es pas obliger de mettre la vitesse du vents)
        # - D√©cris les moments marquants du match dans l‚Äôordre chronologique ou selon leur importance.
        # - Mets en avant les joueurs cl√©s et leurs performances individuelles.
        # - Tourne le r√©sum√© en faveur de l'√©quipe favorite de l'utilisateur : {user_favorite_team}.
        # - Conclus avec une analyse de l'impact de ce match sur la saison ou la rivalit√© entre les √©quipes.
        # - Utilise un style dynamique et fluide, en √©vitant les listes s√®ches et en favorisant des descriptions imag√©es.
        # """

        # Configurer le mod√®le de g√©n√©ration
        generation_config = {
            "temperature": 1.2,
            "top_p": 0.95,
            "top_k": 50,
            "max_output_tokens": 8192,
            "response_mime_type": "text/plain",
        }

        model = genai.GenerativeModel(
          model_name="gemini-1.5-pro",
          generation_config=generation_config,
        )

        chat_session = model.start_chat(
          history=[
          ]
        )
        
        response = chat_session.send_message(game_prompt)
        return response.text

    except Exception as e:
        raise Exception(f"Erreur lors de la g√©n√©ration du r√©sum√© : {e}")
    
  
def generate_and_store_summaries(game_id: str, game_date: datetime, home_team: str, away_team: str, home_team_id: str, away_team_id: str):
    """
    R√©cup√®re les highlights et g√©n√®re les r√©sum√©s des deux √©quipes.
    """
    try:
        
        highlights = get_match_highlights(game_id)
        # print(f"üé• Highlights r√©cup√©r√©s pour {game_id}: {type(highlights)} - {highlights}")  # <-- Debug

        # print(highlights)

        # if not highlights.get("success"):
        if not highlights:

            print(f"‚ö†Ô∏è Pas de highlights pour {game_id}, on r√©essaye plus tard.")
            return False

        home_summary_text = generate_game_summary(highlights, home_team)
        away_summary_text = generate_game_summary(highlights, away_team)
        # print(f"üìù R√©sum√© Home : {home_summary_text}")  # <-- Debug
        # print(f"üìù R√©sum√© Away : {away_summary_text}")  # <-- Debug

        # Utilisation de store_game_summary() pour ins√©rer les r√©sum√©s
        store_game_summary(
            game_id=game_id, game_date=game_date, team_id=home_team_id, team_name=home_team, is_home_team=True,
            text_summary=home_summary_text, opponent_team=away_team
            # , home_video_summary, home_audio_summary
        )
        store_game_summary(
            game_id=game_id, game_date=game_date, team_id=away_team_id, team_name=away_team, is_home_team=False,
            text_summary=away_summary_text, opponent_team=home_team
            # , away_video_summary, away_audio_summary
        )


        print(f"‚úÖ R√©sum√©s g√©n√©r√©s et enregistr√©s pour le match {game_id}")
        return True

    except Exception as e:
        # print(f"‚ùå Erreur lors de la g√©n√©ration des r√©sum√©s highlights : {e}")
        print(f"‚ùå Erreur lors de la g√©n√©ration des r√©sum√©s highlights:")
        # print(f"Type d'objet highlight: {type(highlights)}")
        # print(f"Contenu de highlights: {highlights}")
        # print(f"Message d'erreur: {e}")
        return False

