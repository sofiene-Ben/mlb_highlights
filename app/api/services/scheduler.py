from apscheduler.schedulers.background import BackgroundScheduler
from datetime import datetime, timedelta
from app.api.services.match_service import get_upcoming_matches
from app.api.services.summary_service import generate_and_store_summaries
from app.infrastructure.database.dbchallenge import get_session
from app.api.repositories.game_repository import get_game_summary_from_db
import threading


scheduler = BackgroundScheduler()

def schedule_match_summaries():
    """
    R√©cup√®re les matchs du mois et planifie la g√©n√©ration des r√©sum√©s 3 heures apr√®s le d√©but de chaque match.
    Si la g√©n√©ration est manqu√©e de plus de 6 heures, elle est effectu√©e imm√©diatement.
    """
    upcoming_matches = get_upcoming_matches()

    if not upcoming_matches:
        print("‚ö†Ô∏è Aucun match trouv√© pour le mois en cours.")
        return
    
    for match in upcoming_matches:
        game_id = match["game_id"]
        home_team = match["home_team"]
        away_team = match["away_team"]
        home_team_id = match['home_team_id']
        away_team_id = match['away_team_id']
        # match_start_time = datetime.strptime(match["game_time"], "%Y-%m-%dT%H:%M:%SZ")  # Convertir en objet datetime UTC
        match_start_time = datetime.combine(match["game_time"], datetime.min.time()) 

        # üìÖ Ajouter un d√©lai de 3 heures apr√®s le d√©but du match
        summary_time = match_start_time + timedelta(hours=3)
        current_time = datetime.utcnow()

        # V√©rifier si les r√©sum√©s existent d√©j√† dans la base de donn√©es
        db = next(get_session())  # ‚úÖ Utilisation correcte du g√©n√©rateur

        existing_summary = get_game_summary_from_db(game_id, db)
        # print(f"existing_summary : {existing_summary}")
        if existing_summary:
            print(f"‚úÖ R√©sum√©s d√©j√† pr√©sents pour le match {game_id}, aucune g√©n√©ration n√©cessaire.")
            # return True
        else:
            # V√©rifier si le r√©sum√© est en retard de plus de 6 heures
            if current_time > summary_time + timedelta(hours=6):
                print(f"‚ö†Ô∏è G√©n√©ration manqu√©e pour le match {game_id} ({home_team} vs {away_team}). G√©n√©ration imm√©diate.")
                # Appeler la fonction pour g√©n√©rer et stocker les r√©sum√©s imm√©diatement
                # generate_and_store_summaries(game_id, home_team, away_team)
                generate_and_store_summaries(game_id=game_id, game_date=match_start_time, home_team=home_team, away_team=away_team, home_team_id=home_team_id, away_team_id=away_team_id)

            else:
                # Planifier la g√©n√©ration du r√©sum√© si ce n'est pas en retard de plus de 6 heures
                scheduler.add_job(
                    generate_and_store_summaries,
                    'date',
                    run_date=summary_time,
                    args=[game_id, home_team, away_team],
                    id=f"summary_{game_id}",
                    misfire_grace_time=3600  # Le job sera ex√©cut√© m√™me si l√©g√®rement en retard
                )
                print(f"üìÖ R√©sum√© programm√© pour {game_id} ({home_team} vs {away_team}) √† {summary_time}.")


def start_scheduler():
    """
    D√©marre le planificateur dans un thread s√©par√© pour √©viter qu'il ne bloque le serveur.
    """
    # Planifier les matchs d√®s le d√©marrage
    schedule_match_summaries()

    def run_scheduler():
        scheduler.start()
        print("‚úÖ Scheduler d√©marr√©.")

    scheduler_thread = threading.Thread(target=run_scheduler, daemon=True)
    scheduler_thread.start()


